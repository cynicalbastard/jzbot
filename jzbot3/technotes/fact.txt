This documents the new version of the Fact programming language that will be used in JZBot 3.

JZBot 2's Fact was great, but there were some things that really could have been done better. Since Fact evolved out of something that wasn't intended to be a fully-featured programming language at all, it was missing some things that make life easier. Some of the more noticeable effects of this are:

	It's not possible to define custom functions (this was added in revision 1349, but it's quite hackish)
	
	Almost all numeric comparisons were vulnerable to code injection. This is because a factoid to see if a number is negative might read {if|%1%<0|It's negative.|{if|%1%>0|It's positive.|It's zero.}} or something along those lines. The problem is that the person running the factoid could inject any arbitrary arithmetic equation as the first argument. For this particular example, it's not that big of a deal, but it has the potential to cause serious problems in other situations.
	
	The only datatype is text, and (obviously) there's no object-orientedness. This was considered a feature of Fact because of the simplicity of learning the language, but the particular lack of a list data type made iteration functions unnecessarily convoluted.
	
	There was no equivalent of the eval function, I.E. there was no possible way for a Fact program to itself run an arbitrary string of Fact code.
	
	There was no concise syntax for equation evaluation. The only way to do it was by {eval|...}, and that was vulnerable to injection as mentioned above.
	
	Evaluation only supported numeric types. Arbitrary string comparisons had to be done with functions specifically made for the purpose, such as ifcneq.
	
	The interpreter was integrated into JZBot to the point that it could not be used by an external application
	
	Exceptions were essentially a thin layer over Java exceptions, which made it quite difficult for a factoid itself to throw an exception
	
	There was no easy way to instruct the interpreter to ignore certain pieces of white space, which made indentation (where it was needed) quite difficult
	
So, we have some problems that need to be solved. The one thing that is an absolute must, regardless of all other factors, is that plain text without any of the special symbols surrounding it should be interpreted as literal text, a.k.a. strings. A factoid consisting of the text "Hello, world!" must output "Hello, world!" regardless of anything else.

Another thing that really, really needs to be in there is that factoids should be almost completely reverse-compatible. There are bound to be some situations in which this isn't entirely possible, but it needs to be as close as we can get it to avoid a huge amount of work being needed to port all of the current factoids to the new version of Fact.

So, this file, in a previous revision, contained a bunch of information about two separate syntaxes: text mode and syntax mode. That got too complicated, so it's gone and we're back to just text mode. But with support for a bunch of datatypes: string (obviously), number, map, list, and possibly exception. More to follow.





	











	