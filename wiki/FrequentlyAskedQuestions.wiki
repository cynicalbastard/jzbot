This document contains some commonly-asked questions about JZBot and answers for those questions. There are a couple of things to remember when reading this page:
 * JZBot's factoid language is called *Fact*, and is referred to by that name within this page.
 * A *pm*, when used on this page, refers to a message sent directly to the bot instead of at a channel. Some people also know this as *querying*. Most IRC clients let you send these with `/msg <person> <message...>`, where `<person>` is the person to send to and `<message>` is the message to send.

==Table of Contents==

<wiki:toc/>

==Is there a way to get the process id (pid) of a bot by messaging it?==
There is. Send `exec {mbean|java.lang:type=Runtime|Name}` to your bot in a pm, and it will respond with `pid@host`, where pid is the process id. You must be a superop to do this.

==Where did the name "JZBot" come from?==
The JZBot project was started by [People#Alex javawizard]. Javawizard had attained the nickname "javawiz" on IRC before he switched nicknames to jcp. The "JZ" in JZBot's name comes from "JavawiZ". The "Bot" part should be obvious.

==How fast is JZBot's Fact interpreter?==
First off, Fact was not designed to be fast; it was designed to be concise and easy-to-use. That said, JZBot's Fact interpreter is not the slowest thing around. Below are some benchmarks that were run on a Sony Vaio VGN-FZ298CE with a 1.66GHz Intel Core 2 Duo and 3GB of RAM (of which JZBot used about 4MB). Each benchmark is given as a Fact program, a short explanation of what it does, and the average execution time over 5 runs. This can also be used as a general reference as to which functions perform the fastest.

Parse time is the amount of time it took the fact interpreter to parse the factoid into its internal representation, and usually corresponds to the length, in characters, of the factoid and the number of `{{` sequences present in the factoid. Run time is the time the factoid actually spent running. 

All times are given in milliseconds.

<table border="1" cellspacing="0" cellpadding="1"><tr><th>Fact program</th><th>Description</th><th>Output</th><th>Parse time</th><th>Run time</th><th>Total</th></tr>

<tr>
<td>`Hello world`</td>
<td>Prints out a simple piece of text.</td>
<td>Hello world</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>

<tr>
<td>`{split| |{numberlist|1|5}|v|%v%| -- }`</td>
<td>Iterates over the numbers 1 through 5.</td>
<td>1 -- 2 -- 3 -- 4 -- 5</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>

<tr>
<td>`{split| |{numberlist|1|10000}|v|%v%| -- }`</td>
<td>Iterates over the numbers 1 through 10,000 using a split loop.</td>
<td>1 -- 2 -- 3 -- _etc._ -- 9998 -- 9999 -- 10000</td>
<td>1</td>
<td>22</td>
<td>23</td>
</tr>

<tr>
<td>`{{for||1||10000||v||%v%|| -- }}`</td>
<td>Iterates over the numbers 1 to 10,000 using a for loop.</td>
<td>1 -- 2 -- 3 -- _etc._ -- 9998 -- 9999 -- 10000</td>
<td>0</td>
<td>7</td>
<td>7</td>
</tr>

<tr>
<td>`Hello world`</td>
<td>Prints out a simple piece of text.</td>
<td>Hello world</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>

</table>

==Is there a limit on the size of the call stack when executing factoids?==
Technically, no, but practically, yes. The interpreter and Fact itself do not impose a stack depth limit, but Java does, and every Fact stack frame (a stack frame being where a factoid imports another factoid) adds 11 Java stack frames. Running some tests on the same machine as the benchmarks of the previous question, I was able to get around 7000 Java stack frames before a stack overflow occurred, which would translate to roughly 600 factoid stack frames. I hope to get around to testing this out with an actual Fact benchmark sometime soon.

So, in essence, the Fact interpreter is only limited by the Java platform on which it is running. JZBot catches all stack overflow errors, however, so if one does occur, it will be reported to the user the same as any other factoid syntax error.

==Is there a limit on how many servers a bot can be connected to?==
There isn't any built-in limit. However, the maximum number of servers is generally constrained by available memory and limits of the JVM. A practical limit is 200 servers, although I highly doubt anyone would ever need that many connections. 

For the technically inclined, each server tends to take up around 1KB in the database (in addition to any factoids and other information added at that sever). An IRC connection starts two threads; a BZFlag connection starts four threads. As of this writing I haven't yet written the Facebook protocol, but I'm planning on it using three threads at the moment.

==What should I do if I have a question that's not on here?==
Ask it, by all means! Log in with your Google account (see that *Sign In* link in the upper-right corner; you'll need a Google account to ask a question), and then fill out [http://code.google.com/p/jzbot/issues/entry?template=Question this form]. We'll get back to you shortly.